local LocalPlayer = game.Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")
local RemoteEvent = Character:WaitForChild("RemoteEvent")

-- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
local DIO_POS = Vector3.new(180, -26, 585)

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞—Ä–º–∞
local TargetNPC = "Jotaro"
local isFarming = false
local lastHealth = Humanoid.Health
local isDodging = false
local isDead = false

-- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
local currentTarget = nil
local flyingPlatform = nil
local dodgePlatform = nil
local maintainDistanceThread = nil

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ—Ç–∞—é—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
local function createFlyingPlatform()
    if flyingPlatform then
        flyingPlatform:Destroy()
    end
    
    flyingPlatform = Instance.new("Part")
    flyingPlatform.Name = "FlyingPlatform"
    flyingPlatform.Size = Vector3.new(20, 2, 20)
    flyingPlatform.Anchored = true
    flyingPlatform.CanCollide = true
    flyingPlatform.Transparency = 1
    flyingPlatform.Parent = workspace
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–¥–∂–∞
local function createDodgePlatform(position)
    if dodgePlatform then
        dodgePlatform:Destroy()
    end
    
    dodgePlatform = Instance.new("Part")
    dodgePlatform.Name = "DodgePlatform"
    dodgePlatform.Size = Vector3.new(10, 2, 10)
    dodgePlatform.Anchored = true
    dodgePlatform.CanCollide = true
    dodgePlatform.Transparency = 0.5
    dodgePlatform.BrickColor = BrickColor.new("Bright red")
    dodgePlatform.Material = Enum.Material.Neon
    dodgePlatform.Parent = workspace
    dodgePlatform.Position = position
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ª–µ—Ç–∞—é—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
local function updateFlyingPlatform()
    while true do
        if isFarming and not isDead then
            if not flyingPlatform then
                createFlyingPlatform()
            end
            local playerPos = HumanoidRootPart.Position
            flyingPlatform.Position = Vector3.new(playerPos.X, playerPos.Y - 10, playerPos.Z)
        elseif flyingPlatform then
            flyingPlatform:Destroy()
            flyingPlatform = nil
        end
        wait(0.1)
    end
end

-- –ü–û–ò–°–ö –û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ì–û –î–ñ–û–¢–ê–†–û –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú
local function findSpecificJotaro()
    local livingFolder = workspace:FindFirstChild("Living")
    if not livingFolder then return nil end
    
    local allJotaros = {}
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –î–∂–æ—Ç–∞—Ä–æ
    for _, npc in pairs(livingFolder:GetChildren()) do
        if npc.Name == "Jotaro" then
            local humanoid = npc:FindFirstChildOfClass("Humanoid")
            local rootPart = npc:FindFirstChild("HumanoidRootPart")
            
            if humanoid and humanoid.Health > 0 and rootPart then
                table.insert(allJotaros, {
                    model = npc,
                    humanoid = humanoid,
                    rootPart = rootPart,
                    position = rootPart.Position
                })
            end
        end
    end
    
    if #allJotaros == 0 then
        return nil
    end
    
    -- –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –î–∂–æ—Ç–∞—Ä–æ - –±–µ—Ä–µ–º –µ–≥–æ
    if #allJotaros == 1 then
        print("üéØ –ù–∞–π–¥–µ–Ω 1 –î–∂–æ—Ç–∞—Ä–æ, –∞—Ç–∞–∫—É–µ–º –µ–≥–æ")
        return allJotaros[1]
    end
    
    -- –ï—Å–ª–∏ –¥–≤–∞ –î–∂–æ—Ç–∞—Ä–æ - –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    print("üîç –ù–∞–π–¥–µ–Ω–æ " .. #allJotaros .. " –î–∂–æ—Ç–∞—Ä–æ, –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ...")
    
    -- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ (–Ω–∞—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã)
    local TARGET_POSITION = Vector3.new(144.6, -25.8, 588.4)
    
    local closestJotaro = nil
    local closestDistance = math.huge
    
    for _, jotaro in pairs(allJotaros) do
        local distance = (jotaro.position - TARGET_POSITION).Magnitude
        print("üìè –î–∂–æ—Ç–∞—Ä–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: " .. tostring(jotaro.position) .. ", —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " .. math.floor(distance))
        
        if distance < closestDistance then
            closestDistance = distance
            closestJotaro = jotaro
        end
    end
    
    if closestJotaro and closestDistance < 20 then
        print("üéØ –í—ã–±—Ä–∞–Ω –î–∂–æ—Ç–∞—Ä–æ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏: " .. math.floor(closestDistance))
        return closestJotaro
    end
    
    return nil
end

-- –ú–ï–î–õ–ï–ù–ù–´–ô —Ç–µ–ª–µ–ø–æ—Ä—Ç
local function teleportToPosition(position)
    if isDead or isDodging then return end
    
    local currentPos = HumanoidRootPart.Position
    local targetPos = Vector3.new(position.X, position.Y + 3, position.Z)
    local distance = (currentPos - targetPos).Magnitude
    
    while distance > 20 and not isDead and not isDodging do
        local direction = (targetPos - currentPos).Unit
        currentPos = currentPos + direction * 20
        HumanoidRootPart.CFrame = CFrame.new(currentPos)
        distance = (currentPos - targetPos).Magnitude
        wait(0.3)
    end
    
    if not isDead and not isDodging then
        HumanoidRootPart.CFrame = CFrame.new(targetPos)
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∂–∞—Ç–∏—è M1
local function holdM1()
    while true do
        if isFarming and not isDead and not isDodging then
            local holdStart = tick()
            while tick() - holdStart < 3 and isFarming and not isDead and not isDodging do
                RemoteEvent:FireServer("Attack", "m1")
                wait(0.1)
            end
            wait(1)
        else
            wait(0.5)
        end
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫ NPC
local function faceNPC()
    while true do
        if isFarming and not isDead and not isDodging and currentTarget then
            local targetNPCData = findSpecificJotaro()
            if targetNPCData and targetNPCData.rootPart and targetNPCData.rootPart.Parent then
                local direction = (targetNPCData.rootPart.Position - HumanoidRootPart.Position).Unit
                HumanoidRootPart.CFrame = CFrame.new(HumanoidRootPart.Position, HumanoidRootPart.Position + direction)
            end
        end
        wait(0.1)
    end
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–∞
local function hasJotaroQuest()
    if TargetNPC ~= "Jotaro" then return true end
    
    local questPanel = LocalPlayer.PlayerGui.HUD.Main.Frames.Quest.Quests
    for _, child in pairs(questPanel:GetChildren()) do
        if string.find(child.Name, "Jotaro") or string.find(child.Name, "Defeat") then
            return true
        end
    end
    return false
end

-- –í–∑—è—Ç–∏–µ –∫–≤–µ—Å—Ç–∞ —É –î–∏–æ
local function getJotaroQuest()
    print("üîÑ –ë–µ—Ä–µ–º –∫–≤–µ—Å—Ç —É –î–∏–æ...")
    
    local wasFarming = isFarming
    isFarming = false
    
    teleportToPosition(DIO_POS)
    
    for i = 1, 6 do
        if isDead then break end
        RemoteEvent:FireServer("EndDialogue", {
            NPC = "Dio",
            Dialogue = "Dialogue"..i,
            Option = "Option1"
        })
        wait(0.3)
    end
    wait(1)
    
    print("‚è≥ –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–≤–µ—Å—Ç–∞...")
    wait(15)
    
    isFarming = wasFarming
    return hasJotaroQuest()
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –¥–µ–Ω—å–≥–∏
local function waitForNPCMoney(timeout)
    local moneyBefore = LocalPlayer.PlayerStats.Money.Value
    local startTime = tick()
    timeout = timeout or 5
    
    while tick() - startTime < timeout and not isDead and not isDodging do
        if LocalPlayer.PlayerStats.Money.Value > moneyBefore then
            return true
        end
        wait(0.1)
    end
    return false
end

-- –£–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —É—Ä–æ–Ω–∞ –° –ü–õ–ê–¢–§–û–†–ú–û–ô –ò –ó–ê–ñ–ê–¢–ò–ï–ú G
local function dodgeDamage()
    if isDodging or isDead then return end
    
    isDodging = true
    print("üö® –ü–û–õ–£–ß–ò–õ –£–†–û–ù! –£–ö–õ–û–ù–Ø–Æ–°–¨!")
    
    if maintainDistanceThread then
        maintainDistanceThread:Disconnect()
        maintainDistanceThread = nil
    end
    
    local originalPos = HumanoidRootPart.Position
    
    -- –°–û–ó–î–ê–ï–ú –ü–õ–ê–¢–§–û–†–ú–£ –ü–û–î –ù–ê–ú–ò –í –í–û–ó–î–£–•–ï
    local platformHeight = 25
    local platformPos = Vector3.new(originalPos.X, originalPos.Y + platformHeight - 5, originalPos.Z)
    createDodgePlatform(platformPos)
    
    -- –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 25 –≤–≤–µ—Ä—Ö –∏ –í–´–ö–õ–Æ–ß–ê–ï–ú –ì–†–ê–í–ò–¢–ê–¶–ò–Æ
    local originalGravity = workspace.Gravity
    workspace.Gravity = 0
    
    -- –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    HumanoidRootPart.CFrame = CFrame.new(platformPos.X, platformPos.Y + 3, platformPos.Z)
    
    -- –ó–ê–ñ–ò–ú–ê–ï–ú G –ù–ê 2 –°–ï–ö–£–ù–î–´ –ø–æ–∫–∞ —Å—Ç–æ–∏–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    spawn(function()
        local gStartTime = tick()
        while tick() - gStartTime < 2 and not isDead do
            RemoteEvent:FireServer("InputBegan", {["Input"] = Enum.KeyCode.G})
            wait(0.1)
        end
    end)
    
    -- –°—Ç–æ–∏–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 3 —Å–µ–∫—É–Ω–¥—ã
    local startTime = tick()
    while tick() - startTime < 3 and not isDead do
        -- –î–ï–†–ñ–ò–ú –ü–û–ó–ò–¶–ò–Æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        HumanoidRootPart.CFrame = CFrame.new(platformPos.X, platformPos.Y + 3, platformPos.Z)
        wait(0.1)
    end
    
    -- –í–ö–õ–Æ–ß–ê–ï–ú –ì–†–ê–í–ò–¢–ê–¶–ò–Æ –æ–±—Ä–∞—Ç–Ω–æ
    workspace.Gravity = originalGravity
    
    -- –£–î–ê–õ–Ø–ï–ú –ü–õ–ê–¢–§–û–†–ú–£ –î–û–î–ñ–ê
    if dodgePlatform then
        dodgePlatform:Destroy()
        dodgePlatform = nil
    end
    
    if not isDead then
        -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –∑–µ–º–ª—é
        HumanoidRootPart.CFrame = CFrame.new(originalPos.X, originalPos.Y, originalPos.Z)
    end
    
    isDodging = false
    print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ —Ñ–∞—Ä–º—É")
    
    -- –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï –î–ò–°–¢–ê–ù–¶–ò–ò –°–ù–û–í–ê
    if currentTarget and currentTarget:FindFirstChild("HumanoidRootPart") then
        maintainDistanceThread = spawn(function() 
            while isFarming and currentTarget and currentTarget:FindFirstChild("HumanoidRootPart") and not isDead do
                if not isDodging then
                    local distance = (HumanoidRootPart.Position - currentTarget.HumanoidRootPart.Position).Magnitude
                    local ATTACK_DISTANCE = 5
                    
                    if distance > ATTACK_DISTANCE then
                        local direction = (currentTarget.HumanoidRootPart.Position - HumanoidRootPart.Position).Unit
                        local moveDistance = math.min(15, distance - ATTACK_DISTANCE)
                        local newPosition = HumanoidRootPart.Position + direction * moveDistance
                        newPosition = Vector3.new(newPosition.X, HumanoidRootPart.Position.Y, newPosition.Z)
                        HumanoidRootPart.CFrame = CFrame.new(newPosition)
                    end
                end
                wait(2)
            end
        end)
    end
end

-- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–Ω–∞
spawn(function()
    while true do
        if isFarming and not isDead then
            if Humanoid.Health < lastHealth then
                lastHealth = Humanoid.Health
                dodgeDamage()
            end
            lastHealth = Humanoid.Health
        end
        wait(0.05)
    end
end)

-- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–≤–µ—Å—Ç–∞
spawn(function()
    while true do
        if isFarming and not isDead and TargetNPC == "Jotaro" then
            if not hasJotaroQuest() then
                print("‚ùå –ö–≤–µ—Å—Ç –ø—Ä–æ–ø–∞–ª! –ë–µ—Ä–µ–º –∫–≤–µ—Å—Ç...")
                currentTarget = nil
                getJotaroQuest()
            end
        end
        wait(2)
    end
end)

-- –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–∂–∞—Ç–∏–µ M1
spawn(holdM1)

-- –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∫ NPC
spawn(faceNPC)

-- –ê–≤—Ç–æ-—Å—Ç–µ–Ω–¥
spawn(function()
    while true do
        if isFarming and Character:FindFirstChild("SummonedStand") and not Character.SummonedStand.Value and not isDead and not isDodging then
            RemoteEvent:FireServer("ToggleStand", "Toggle")
        end
        wait(1)
    end
end)

-- –ù–∞–∂–∞—Ç–∏–µ R
spawn(function()
    while true do
        if isFarming and not isDead and not isDodging then
            RemoteEvent:FireServer("InputBegan", {["Input"] = Enum.KeyCode.R})
        end
        wait(2)
    end
end)

-- –ù–∞–∂–∞—Ç–∏–µ Y –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É
spawn(function()
    while true do
        if isFarming and not isDead and not isDodging then
            RemoteEvent:FireServer("InputBegan", {["Input"] = Enum.KeyCode.Y})
        end
        wait(1)
    end
end)

-- –ó–∞–∂–∞—Ç–∏–µ G –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
spawn(function()
    while true do
        if isFarming and not isDead and not isDodging then
            local holdStart = tick()
            while tick() - holdStart < 3 and isFarming and not isDead and not isDodging do
                RemoteEvent:FireServer("InputBegan", {["Input"] = Enum.KeyCode.G})
                wait(0.1)
            end
            wait(30) -- –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–∂–∞—Ç–∏–µ–º
        else
            wait(1)
        end
    end
end)

-- –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ 3 —Ä–∞–∑–∞ —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
spawn(function()
    while true do
        if isFarming and not isDead and not isDodging then
            for i = 1, 3 do
                RemoteEvent:FireServer("Attack", "m2")
                wait(0.2)
            end
            wait(5)
        else
            wait(1)
        end
    end
end)

-- –§—É–Ω–∫—Ü–∏—è —Ñ–∞—Ä–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –î–∂–æ—Ç–∞—Ä–æ
local function farmSpecificJotaro()
    local targetNPCData = findSpecificJotaro()
    
    if targetNPCData and not isDead then
        if currentTarget ~= targetNPCData.model then
            currentTarget = targetNPCData.model
            print("üéØ –ù–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π –î–∂–æ—Ç–∞—Ä–æ, —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è...")
            
            teleportToPosition(targetNPCData.rootPart.Position)
            
            -- –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            maintainDistanceThread = spawn(function() 
                while isFarming and currentTarget and currentTarget:FindFirstChild("HumanoidRootPart") and not isDead do
                    if not isDodging then
                        local distance = (HumanoidRootPart.Position - currentTarget.HumanoidRootPart.Position).Magnitude
                        local ATTACK_DISTANCE = 5
                        
                        if distance > ATTACK_DISTANCE then
                            local direction = (currentTarget.HumanoidRootPart.Position - HumanoidRootPart.Position).Unit
                            local moveDistance = math.min(15, distance - ATTACK_DISTANCE)
                            local newPosition = HumanoidRootPart.Position + direction * moveDistance
                            newPosition = Vector3.new(newPosition.X, HumanoidRootPart.Position.Y, newPosition.Z)
                            HumanoidRootPart.CFrame = CFrame.new(newPosition)
                        end
                    end
                    wait(2)
                end
            end)
        end
        
        while targetNPCData.humanoid and targetNPCData.humanoid.Health > 0 and isFarming and not isDead do
            if waitForNPCMoney(0.5) then
                print("üí∞ –ù—É–∂–Ω—ã–π –î–∂–æ—Ç–∞—Ä–æ —É–±–∏—Ç!")
                currentTarget = nil
                return true
            end
            
            if not targetNPCData.humanoid or targetNPCData.humanoid.Health <= 0 or not targetNPCData.model.Parent then
                currentTarget = nil
                return false
            end
            
            wait(0.1)
        end
    else
        currentTarget = nil
    end
    return false
end

-- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏
local function handleRespawn()
    while true do
        if not Character or not HumanoidRootPart or not HumanoidRootPart.Parent then
            isDead = true
            print("üíÄ –£–º–µ—Ä! –ñ–¥–µ–º –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è...")
            
            -- –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
            if flyingPlatform then
                flyingPlatform:Destroy()
                flyingPlatform = nil
            end
            if dodgePlatform then
                dodgePlatform:Destroy()
                dodgePlatform = nil
            end
            
            repeat
                wait(1)
            until LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            
            Character = LocalPlayer.Character
            HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
            Humanoid = Character:WaitForChild("Humanoid")
            RemoteEvent = Character:WaitForChild("RemoteEvent")
            
            isDead = false
            lastHealth = Humanoid.Health
            currentTarget = nil
            
            print("üîÑ –í–æ–∑—Ä–æ–¥–∏–ª—Å—è! –õ–µ—Ç–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –î–∂–æ—Ç–∞—Ä–æ...")
            
            if isFarming then
                local targetNPCData = findSpecificJotaro()
                if targetNPCData then
                    teleportToPosition(targetNPCData.rootPart.Position)
                    print("üéØ –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω—É–∂–Ω–æ–º—É –î–∂–æ—Ç–∞—Ä–æ!")
                else
                    print("‚è≥ –ù—É–∂–Ω—ã–π –î–∂–æ—Ç–∞—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º...")
                end
            end
        end
        wait(1)
    end
end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–∞—Ä–º–∞
local function farmNPC()
    spawn(handleRespawn)
    
    while true do
        if TargetNPC == "Jotaro" and not hasJotaroQuest() and not isDead then
            local questTaken = getJotaroQuest()
            if not questTaken then
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∫–≤–µ—Å—Ç, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                wait(5)
                continue
            end
        end
        
        if not isDead then
            isFarming = true
            lastHealth = Humanoid.Health
            currentTarget = nil
            
            local jotaroKilled = false
            while not jotaroKilled and isFarming and not isDead do
                jotaroKilled = farmSpecificJotaro()
                
                if not jotaroKilled and not isDead then
                    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—Å–ø–∞–≤–Ω–∞ –Ω—É–∂–Ω–æ–≥–æ –î–∂–æ—Ç–∞—Ä–æ...")
                    wait(2)
                end
            end
            
            isFarming = false
            
            if jotaroKilled and TargetNPC == "Jotaro" then
                print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞...")
                wait(2)
            end
            
            wait(2)
        else
            wait(1)
        end
    end
end

-- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∫ –î–∂–æ—Ç–∞—Ä–æ
spawn(function()
    while true do
        if isFarming and not isDead and not isDodging then
            local targetNPCData = findSpecificJotaro()
            if targetNPCData and targetNPCData.rootPart then
                local pos = targetNPCData.rootPart.Position
                HumanoidRootPart.CFrame = CFrame.new(HumanoidRootPart.Position, Vector3.new(pos.X, HumanoidRootPart.Position.Y, pos.Z))
            end
        end
        wait(0.5)
    end
end)

-- –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ—Ç–∞—é—â—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
spawn(updateFlyingPlatform)

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞—Ä–º
farmNPC()
